[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ayrat Aymetov",
    "section": "",
    "text": "I am a graduate student at Baruch College pursuing a Master’s degree in Statistics with a Data Science track. My expected graduation date is the end of May 2025. I have a Bachelor’s degree in Computer Science with a minor in Data Science and Computational Mathematics from Brooklyn College. I am seeking employment as a Data Scientist or Data Analyst.\n\n\n\nMaster’s degree from Baruch College\n\n\n\n\n\nBachelor’s degree from Brooklyn College"
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Mini-Project #01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "",
    "text": "This analysis leverages data from the National Transit Database (NTD) to provide insights into the financial and operational performance of various transit agencies in the United States for the year 2022. By focusing on key metrics such as farebox revenues, total unlinked passenger trips (UPT), vehicle miles traveled (VRM), and operational expenses, we aim to evaluate the efficiency and effectiveness of transit systems in serving their communities.\nThe analysis draws on three primary data sources: the 2022 Fare Revenue table, the latest Monthly Ridership tables, and the 2022 Operating Expenses reports. While the data may reflect some post-pandemic irregularities, the focus of this project is not on long-term forecasting but rather on a snapshot of transit performance during a pivotal year in the industry. Through this exploration, we will identify trends, highlight successful transit systems, and underscore areas where improvements may be needed."
  },
  {
    "objectID": "mp01.html#task-1---creating-syntatic-names.-rebaming-a-column-uza-name-to-metro_area",
    "href": "mp01.html#task-1---creating-syntatic-names.-rebaming-a-column-uza-name-to-metro_area",
    "title": "Mini-Project #01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Task 1 - Creating Syntatic Names. Rebaming a column: UZA Name to metro_area",
    "text": "Task 1 - Creating Syntatic Names. Rebaming a column: UZA Name to metro_area\n\nUSAGE &lt;- USAGE |&gt;\n  rename(metro_area = `UZA Name`)\n\ncolnames(USAGE)\n\n[1] \"NTD ID\"     \"Agency\"     \"metro_area\" \"Mode\"       \"3 Mode\"    \n[6] \"month\"      \"UPT\"        \"VRM\"       \n\n\nThe Mode column is also helpful, but it uses a set of codes that aren’t interpretable. To make life easier for ourselves, let’s use a case_when statement to transform this into something we can make sense of."
  },
  {
    "objectID": "mp01.html#task-2-recoding-the-mode-column",
    "href": "mp01.html#task-2-recoding-the-mode-column",
    "title": "Mini-Project #01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Task 2: Recoding the Mode column",
    "text": "Task 2: Recoding the Mode column\nThese are unique code in column “Mode”\n\nunique_modes &lt;- USAGE |&gt;\n  distinct(Mode)\n\nprint(unique_modes)\n\n# A tibble: 18 × 1\n   Mode \n   &lt;chr&gt;\n 1 DR   \n 2 FB   \n 3 MB   \n 4 SR   \n 5 TB   \n 6 VP   \n 7 CB   \n 8 RB   \n 9 LR   \n10 YR   \n11 MG   \n12 CR   \n13 AR   \n14 TR   \n15 HR   \n16 IP   \n17 PB   \n18 CC   \n\n\nOn the NTD website we can find the interpretations of these codes: Alaska Railroad (AR) Cable Car (CC) Commuter Rail (CR) Heavy Rail (HR) Hybrid Rail (YR) Inclined Plane (IP) Light Rail (LR) Monorail/Automated Guideway (MG) Streetcar Rail (SR) Aerial Tramway (TR) Commuter Bus (CB) Bus (MB) Bus Rapid Transit (RB) Demand Response (DR) Ferryboat (FB) Jitney (JT) Público (PB) Trolleybus (TB) Vanpool (VP)\nNow we can replace codes with corresponding interpretations in both tables USAGE and FINANCIALS:\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\", \n    Mode == \"CC\" ~ \"Cable Car\", \n    Mode == \"CR\" ~ \"Commuter Rail\", \n    Mode == \"HR\" ~ \"Heavy Rail\", \n    Mode == \"YR\" ~ \"Hybrid Rail\", \n    Mode == \"IP\" ~ \"Inclined Plane\", \n    Mode == \"LR\" ~ \"Light Rail\", \n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\", \n    Mode == \"SR\" ~ \"Streetcar Rail\", \n    Mode == \"TR\" ~ \"Aerial Tramway\", \n    Mode == \"CB\" ~ \"Commuter Bus\", \n    Mode == \"MB\" ~ \"Bus\", \n    Mode == \"RB\" ~ \"Bus Rapid Transit\", \n    Mode == \"DR\" ~ \"Demand Response\", \n    Mode == \"FB\" ~ \"Ferryboat\", \n    Mode == \"JT\" ~ \"Jitney\", \n    Mode == \"PB\" ~ \"Público\", \n    Mode == \"TB\" ~ \"Trolleybus\", \n    Mode == \"VP\" ~ \"Vanpool\", \n    TRUE ~ \"Unknown\"  # Default for any unrecognized mode\n  ))\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\", \n    Mode == \"CC\" ~ \"Cable Car\", \n    Mode == \"CR\" ~ \"Commuter Rail\", \n    Mode == \"HR\" ~ \"Heavy Rail\", \n    Mode == \"YR\" ~ \"Hybrid Rail\", \n    Mode == \"IP\" ~ \"Inclined Plane\", \n    Mode == \"LR\" ~ \"Light Rail\", \n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\", \n    Mode == \"SR\" ~ \"Streetcar Rail\", \n    Mode == \"TR\" ~ \"Aerial Tramway\", \n    Mode == \"CB\" ~ \"Commuter Bus\", \n    Mode == \"MB\" ~ \"Bus\", \n    Mode == \"RB\" ~ \"Bus Rapid Transit\", \n    Mode == \"DR\" ~ \"Demand Response\", \n    Mode == \"FB\" ~ \"Ferryboat\", \n    Mode == \"JT\" ~ \"Jitney\", \n    Mode == \"PB\" ~ \"Público\", \n    Mode == \"TB\" ~ \"Trolleybus\", \n    Mode == \"VP\" ~ \"Vanpool\", \n    TRUE ~ \"Unknown\"  # Default for any unrecognized mode\n  ))\n\nTo make the table cleaner, we might want to modify this code to unselect the ‘NTD ID’ and ;3 Mode’ columns and rename the UPT and VRM columns.\n\nUSAGE_clean &lt;- USAGE |&gt;\n  select(-`NTD ID`, -`3 Mode`) |&gt;\n  rename(\n    Unlinked_Passenger_Trips = UPT,\n    Vehicle_Revenue_Miles = VRM\n  )\n\nNow that the data is clean, I may want to create an attractive summary table of my cleaned up USAGE table using the following snippet:\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "mp02.html#task-1",
    "href": "mp02.html#task-1",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "Task 1",
    "text": "Task 1\nUsing the glimpse() function, we see that certain columns need type conversion. In NAME_BASICS, birthYear and deathYear should be converted to numeric using as.numeric(). In TITLE_EPISODES, both seasonNumber and episodeNumber should also be numeric. Similarly, startYear, endYear, and runtimeMinutes in TITLE_BASICS should be numeric. We can use mutate() to apply these changes efficiently.\n\nNAME_BASICS &lt;- NAME_BASICS |&gt;\n    mutate(birthYear = as.numeric(birthYear),\n           deathYear = as.numeric(deathYear))\n\nTITLE_EPISODES &lt;- TITLE_EPISODES |&gt;\n    mutate(seasonNumber = as.numeric(episodeNumber),\n           episodeNumber = as.numeric(episodeNumber))\n\nTITLE_BASICS &lt;- TITLE_BASICS |&gt;\n    mutate(startYear = as.numeric(startYear),\n           endYear = as.numeric(endYear))\n\nLet’s look at all five tables and data types of their columns:\n\nlibrary(DT)\n\ndata_tables &lt;- list(\n  NAME_BASICS = NAME_BASICS,\n  TITLE_BASICS = TITLE_BASICS,\n  TITLE_EPISODES = TITLE_EPISODES,\n  TITLE_RATINGS = TITLE_RATINGS,\n  TITLE_CREW = TITLE_CREW,\n  TITLE_PRINCIPALS = TITLE_PRINCIPALS\n)\n\ntable_summary &lt;- map_df(names(data_tables), ~ {\n  data &lt;- data_tables[[.x]]\n  tibble(\n    Table_Name = .x,\n    Column_Names = paste(colnames(data), collapse = \", \"),\n    Data_Types = paste(sapply(data, class), collapse = \", \"),\n    Size = paste(nrow(data), \"rows x\", ncol(data), \"cols\")\n  )\n})\n\ndatatable(\n  table_summary,\n  caption = \"Summary of Data Tables\",\n  options = list(dom = 't', pageLength = 5, lengthMenu = c(5, 10, 15)),\n  class = 'cell-border stripe'\n)"
  },
  {
    "objectID": "mp02.html#task-2-instructor-provided-questions",
    "href": "mp02.html#task-2-instructor-provided-questions",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "Task 2: Instructor-Provided Questions",
    "text": "Task 2: Instructor-Provided Questions\n\n1. How many movies are in our data set? How many TV series? How many TV episodes?\nBefore answering questions about movies and TV series, let’s first examine the data types present in the TITLE_BASICS dataset.\n\n# Getting unique title types from TITLE_BASICS table\nunique_title_types &lt;- TITLE_BASICS |&gt;\n  distinct(titleType) |&gt;\n  pull(titleType) \n\nunique_title_types\n\n [1] \"short\"        \"movie\"        \"tvSeries\"     \"tvMiniSeries\" \"tvMovie\"     \n [6] \"tvEpisode\"    \"tvShort\"      \"video\"        \"tvSpecial\"    \"videoGame\"   \n\n\nNow lets find the number of tv series, episodes and movies from the TITLE_BASICS data set:\n\nnum_tv_series_e &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"tvSeries\") |&gt;\n  nrow()\ncat(\"Number of tv series:\", num_tv_series_e, \"\\n\")\n\nNumber of tv series: 8960 \n\nnum_tv_ep &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"tvEpisode\") |&gt;\n  nrow()\ncat(\"Number of episodes:\", num_tv_ep, \"\\n\")\n\nNumber of episodes: 29332 \n\nnum_movies &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"movie\") |&gt;\n  nrow()\ncat(\"Number of movies:\", num_movies, \"\\n\")\n\nNumber of movies: 44032"
  },
  {
    "objectID": "mp02.html#who-is-the-oldest-living-person-in-our-data-set",
    "href": "mp02.html#who-is-the-oldest-living-person-in-our-data-set",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "2. Who is the oldest living person in our data set?",
    "text": "2. Who is the oldest living person in our data set?\n\n# Filter for living individuals and find the oldest. deathYear column should not have any numeric data\noldest_living_person &lt;- NAME_BASICS |&gt;\n  filter(is.na(deathYear)) |&gt;              \n  arrange(birthYear) |&gt;                    \n  slice_head(n = 1) |&gt;\n  mutate(Age = 2024 - birthYear) |&gt;\n  select(\n    `Person Name` = primaryName, \n    `Year Born` = birthYear,\n    Age,\n    `Death Year` = deathYear, \n    Profession = primaryProfession\n  )\n\noldest_living_person\n\n     Person Name Year Born Age Death Year Profession\n1 Traudl Lessing      1625 399         NA        \\\\N\n\n\nThe last result seems questionable, possibly indicating a missing table in the dataset. To ensure accuracy, let’s focus only on individuals who are no older than 105 years.\n\noldest_living_person_under_105 &lt;- NAME_BASICS |&gt;\n  filter(is.na(deathYear),                  \n         birthYear &gt; 2024 - 105) |&gt;  \n  arrange(birthYear) |&gt;                     \n  slice_head(n = 1) |&gt;\n  mutate(Age = 2024 - birthYear) |&gt;\n  select(\n    `Person Name` = primaryName, \n    `Year Born` = birthYear,\n    Age,\n    `Death Year` = deathYear, \n    Profession = primaryProfession\n  )\n\noldest_living_person_under_105\n\n   Person Name Year Born Age Death Year Profession\n1 Lily Aclemar      1920 104         NA    actress\n\n\n\n3.There is one TV Episode in this data set with a perfect 10/10 rating and at least 200,000 IMDb ratings. What is it? What series does it belong to?\n\n# Identify the TV episode with a perfect 10/10 rating and at least 200,000 votes, including season and episode details\nperfect_rated_episodes_with_series &lt;- TITLE_EPISODES |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\") |&gt;\n  filter(numVotes &gt; 200000, averageRating == 10) |&gt;\n  inner_join(TITLE_BASICS, by = c(\"parentTconst\" = \"tconst\")) |&gt;\n  select(\n    `Title Type` = titleType, \n    `Title Name` = primaryTitle, \n    `Season Number` = seasonNumber,\n    `Episode Number` = episodeNumber,\n    `Average Rating` = averageRating, \n    `Number of Votes` = numVotes\n  )\n\nperfect_rated_episodes_with_series\n\n  Title Type   Title Name Season Number Episode Number Average Rating\n1   tvSeries Breaking Bad            14             14             10\n  Number of Votes\n1          230609\n\n\n\n\n4. What four projects is the actor Mark Hamill most known for?\n\n# Retrieve and display Mark Hamill's top projects with relevant title details\nmark_hamill_project_details &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Mark Hamill\") |&gt;\n  select(knownForTitles) |&gt;\n  tidyr::separate_longer_delim(knownForTitles, \",\") |&gt;\n  slice_head(n = 5) |&gt;\n  inner_join(TITLE_BASICS, by = c(\"knownForTitles\" = \"tconst\")) |&gt;\n  select(\n    `Title Type` = titleType, \n    `Title Name` = primaryTitle, \n    `Original Title` = originalTitle\n  )\n\nmark_hamill_project_details\n\n  Title Type                                     Title Name\n1      movie             Star Wars: Episode IV - A New Hope\n2      movie        Star Wars: Episode VIII - The Last Jedi\n3      movie Star Wars: Episode V - The Empire Strikes Back\n4      movie     Star Wars: Episode VI - Return of the Jedi\n                                  Original Title\n1                                      Star Wars\n2        Star Wars: Episode VIII - The Last Jedi\n3 Star Wars: Episode V - The Empire Strikes Back\n4     Star Wars: Episode VI - Return of the Jedi\n\n\n\n\n5. What TV series, with more than 12 episodes, has the highest average rating?\n\n# Retrieve the highest-rated series with more than 12 episodes and display relevant details\nhighest_rated_series_details &lt;- TITLE_EPISODES |&gt;\n  group_by(parentTconst) |&gt;\n  summarise(episode_count = n(), .groups = 'drop') |&gt;\n  filter(episode_count &gt; 12) |&gt;\n  inner_join(TITLE_RATINGS, by = c(\"parentTconst\" = \"tconst\")) |&gt;\n  group_by(parentTconst) |&gt;\n  summarise(average_rating = mean(averageRating), .groups = 'drop') |&gt;\n  arrange(desc(average_rating)) |&gt;\n  slice_head(n = 1) |&gt;\n  inner_join(TITLE_BASICS, by = c(\"parentTconst\" = \"tconst\")) |&gt;\n  select(\n    `Title Name` = primaryTitle,\n    `Average Rating` = average_rating)\n\nhighest_rated_series_details\n\n# A tibble: 1 × 2\n  `Title Name` `Average Rating`\n  &lt;chr&gt;                   &lt;dbl&gt;\n1 Choufli Hal               9.7\n\n\n\n\n6.Is it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?\n\n# Check if there are multiple TV series called 'Happy Days' and display relevant details\nhappy_days_details &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle == \"Happy Days\" & titleType == \"tvSeries\") |&gt;\n  select(\n    `Title Name` = primaryTitle, \n    `Type` = titleType, \n    `Start Year` = startYear, \n    `End Year` = endYear, \n    `Genres` = genres\n  )\n\nprint(happy_days_details)\n\n  Title Name     Type Start Year End Year              Genres\n1 Happy Days tvSeries       1974     1984 Comedy,Family,Music\n\n\nThere are two TV series titled “Happy Days.” We will focus our analysis only on the one that premiered in 1974. lets check what season there are in the chosen TV weries.\n\n# Analyze the season information and include the title name by joining with TITLE_BASICS\nseasons_info &lt;- TITLE_EPISODES |&gt;\n  filter(parentTconst %in% c(\"tt0070992\", \"tt1437484\")) |&gt;\n  group_by(parentTconst) |&gt;\n  summarise(\n    min_season = min(seasonNumber, na.rm = TRUE),\n    max_season = max(seasonNumber, na.rm = TRUE),\n    num_seasons = n_distinct(seasonNumber),\n    .groups = 'drop'\n  ) |&gt;\n  inner_join(TITLE_BASICS, by = c(\"parentTconst\" = \"tconst\")) |&gt;\n  select(\n    `Title Name` = primaryTitle,\n    `Minimum Season` = min_season,\n    `Highest Season` = max_season,\n    `Number of Seasons` = num_seasons\n  )\n\nseasons_info\n\n# A tibble: 1 × 4\n  `Title Name` `Minimum Season` `Highest Season` `Number of Seasons`\n  &lt;chr&gt;                   &lt;dbl&gt;            &lt;dbl&gt;               &lt;int&gt;\n1 Happy Days                  1               27                  27\n\n\nWe can now confirm that the selected TV series matches the one required for the task. Let’s proceed with the analysis by dividing the series into ‘Early Seasons’ and ‘Later Seasons’, followed by calculating the average rating for each group.\n\n# Analyze the average ratings of 'Happy Days' by dividing into 'Early Seasons' and 'Later Seasons'\nhappy_days_tconst &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle == \"Happy Days\", titleType == \"tvSeries\", startYear == 1974) |&gt;\n  pull(tconst)\n\nhappy_days_ratings &lt;- TITLE_EPISODES |&gt;\n  filter(parentTconst == happy_days_tconst) |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\") |&gt;\n  group_by(seasonNumber) |&gt;\n  summarise(averageRating = mean(averageRating), .groups = 'drop') |&gt;\n  mutate(seasonCategory = ifelse(seasonNumber &lt;= 5, \"Early Seasons\", \"Later Seasons\")) |&gt;\n  group_by(seasonCategory) |&gt;\n  summarise(averageRating = mean(averageRating), .groups = 'drop')\n\nhappy_days_ratings\n\n# A tibble: 0 × 2\n# ℹ 2 variables: seasonCategory &lt;lgl&gt;, averageRating &lt;dbl&gt;"
  },
  {
    "objectID": "mp02.html#task-3-custom-success-metric",
    "href": "mp02.html#task-3-custom-success-metric",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "Task 3: Custom Success Metric",
    "text": "Task 3: Custom Success Metric\nIn this task we will create a custom success metric that reflects both the quality (average IMDb rating) and public awareness (number of votes). Using this metric, we’ll add a new column to the TITLE_RATINGS table with the help of the mutate() function. This metric will guide us in identifying the most successful movies for our proposal.\nBefore we start lets look at the distribution of IMDb Ratings of movies and tv series\n\nfiltered_titles &lt;- TITLE_BASICS |&gt;\n  filter(titleType %in% c(\"movie\", \"tvSeries\")) |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")\n\n# Plotting the distribution of average ratings\nggplot(filtered_titles, aes(x = averageRating)) +\n  geom_histogram(bins = 50, fill = \"blue\", color = \"black\") +\n  labs(title = \"Distribution of IMDb Ratings\",\n       x = \"Average Rating\",\n       y = \"Count of Titles\")\n\n\n\n\n\n\n\n\nSince our success metric will rely on both ratings and number of votes (public awareness), let’s first examine the distribution of votes to better understand how public engagement varies across titles.\n\nlibrary(scales)\n\nsuccess_titles &lt;- TITLE_RATINGS |&gt;\n  mutate(success = case_when(\n    averageRating &gt;= 7.5 & numVotes &gt;= 50000 ~ \"High\",\n    averageRating &lt; 5.0 ~ \"Low\",\n    TRUE ~ \"Medium\"\n  ))\n\n# Plotting the distribution of numVotes with formatted axis labels\nggplot(success_titles, aes(x = numVotes)) +\n  geom_histogram(bins = 100, fill = \"blue\", color = \"black\") +\n  scale_x_log10(labels = comma_format(scale = 1/1000, suffix = \"k\")) + \n  labs(title = \"Distribution of IMDb Votes\",\n       x = \"Number of Votes (log scale)\",\n       y = \"Count of Titles\") +\n  theme_minimal() +\n  theme() \n\n\n\n\n\n\n\n\nBased on these two distributions, we can define a success metric. We’ll categorize movies and TV series as highly successful if they have an average rating of at least 7.5 out of 10 and at least 50,000 votes. This high vote threshold ensures that the titles we include predominantly come from USA and Europe, reflecting strong public engagement in these regions.\n\nsuccess_summary &lt;- success_titles |&gt;\n  group_by(success) |&gt;\n  summarise(Count = n(), .groups = 'drop')\n\nsuccess_summary\n\n# A tibble: 3 × 2\n  success Count\n  &lt;chr&gt;   &lt;int&gt;\n1 High     1696\n2 Low      7502\n3 Medium  82793\n\n\nWe assigned High success to 1695 titles, and Low success to 37861 titles.\n\n# Analyze and visualize the number of high success movies and TV series\nsuccess_counts &lt;- success_titles |&gt;\n  filter(success == \"High\") |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\") |&gt;\n  filter(titleType %in% c(\"movie\", \"tvSeries\")) |&gt;\n  count(TitleType = titleType) |&gt;\n  mutate(TitleType = ifelse(TitleType == \"movie\", \"Movies\", \"TV Series\"))\n\nggplot(success_counts, aes(x = TitleType, y = n, fill = TitleType)) +\n  geom_col() +\n  labs(\n    title = \"Number of High Success Movies and TV Series\",\n    x = \"Type of Title\",\n    y = \"Count\"\n  ) +\n  scale_fill_manual(values = c(\"Movies\" = \"blue\", \"TV Series\" = \"red\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nLets look at are plot of successful movies and TV series distribution.\n\n# Adjusted join and filtering for high success titles\ntitle_details_high &lt;- success_titles |&gt;\n  filter(success == \"High\") |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\") |&gt;\n  filter(titleType %in% c(\"movie\", \"tvSeries\"))\n\n# Filter for movies and TV series specifically\nmovie_details_high &lt;- title_details_high |&gt;filter(titleType == \"movie\")\ntv_series_details_high &lt;- title_details_high |&gt; filter(titleType == \"tvSeries\")\n\n\ncombined_ratings &lt;- bind_rows(\n  movie_details_high |&gt; mutate(Type = \"Movies\"),\n  tv_series_details_high |&gt; mutate(Type = \"TV Series\")\n)\n\n# Plotting the smooth area graph for both Movies and TV Series\nggplot(combined_ratings, aes(x = averageRating, fill = Type)) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Distribution of Ratings for High Success Movies and TV Series\",\n    x = \"Average Rating\",\n    y = \"Density\"\n  ) +\n  scale_fill_manual(values = c(\"Movies\" = \"blue\", \"TV Series\" = \"red\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nValidate your success metric as follows:\n\n1. Choose the top 5-10 movies on your metric and confirm that they were indeed box office successes.\n\ntop_movies &lt;- movie_details_high |&gt;\n  filter(numVotes &gt; 100000) |&gt;\n  arrange(desc(averageRating), desc(numVotes)) |&gt;\n  head(5) |&gt;\n  select(\n    `Title` = primaryTitle, \n    `Year Released` = startYear, \n    `Genres` = genres, \n    `Average Rating` = averageRating, \n    `Number of Votes` = numVotes\n  )\n\ntop_movies\n\n                                          Title Year Released\n1                      The Shawshank Redemption          1994\n2                                 The Godfather          1972\n3                               The Dark Knight          2008\n4 The Lord of the Rings: The Return of the King          2003\n5                              Schindler's List          1993\n                   Genres Average Rating Number of Votes\n1                   Drama            9.3         2955611\n2             Crime,Drama            9.2         2060557\n3      Action,Crime,Drama            9.0         2937308\n4  Action,Adventure,Drama            9.0         2023485\n5 Biography,Drama,History            9.0         1482543\n\n\nThe box office data pulled from internet:\n\n# Create a data frame with box office data and displaying a table\nbox_office_data &lt;- data.frame(\n  Movie = c(\n    \"The Shawshank Redemption (1994)\",\n    \"The Godfather (1972)\",\n    \"The Dark Knight (2008)\",\n    \"The Lord of the Rings: The Return of the King (2003)\",\n    \"Schindler's List (1993)\"\n  ),\n  `Worldwide Box-Office` = c(\n    \"$29,331,551\",\n    \"$250,342,198\",\n    \"$1,009,025,676\",\n    \"$1,138,027,091\",\n    \"$322,161,245\"\n  ),\n  stringsAsFactors = FALSE\n)\n\ndatatable(\n  box_office_data,\n  caption = \"Box Office Data for Selected Movies\",\n  options = list(\n    dom = 't',\n    ordering = FALSE\n  ),\n  class = 'cell-border stripe'\n)\n\n\n\n\n\n\n\n2. Choose 3-5 movies with large numbers of IMDb votes that score poorly on your success metric and confirm that they are indeed of low quality.\n\n# Filtering movies classified as Low success with a significant number of votes\nlow_quality_high_votes &lt;- success_titles |&gt;\n  filter(success == \"Low\" & numVotes &gt; 10000) |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\") |&gt;\n  arrange(desc(numVotes)) |&gt;\n  select(primaryTitle, startYear, genres, averageRating, numVotes) |&gt;\n  head(5)\n\nlow_quality_high_votes\n\n                               primaryTitle startYear                  genres\n1                      Fifty Shades of Grey      2015  Drama,Romance,Thriller\n2               The Twilight Saga: New Moon      2009 Adventure,Drama,Fantasy\n3                            Batman & Robin      1997           Action,Sci-Fi\n4                           The Iron Throne      2019  Action,Adventure,Drama\n5 The Twilight Saga: Breaking Dawn - Part 1      2011 Adventure,Drama,Fantasy\n  averageRating numVotes\n1           4.2   340888\n2           4.8   304579\n3           3.8   271854\n4           4.0   267760\n5           4.9   258206\n\n\n\n# Creating a data frame with the new box office data and displaying the data as an interactive DT table\nbox_office_data &lt;- data.frame(\n  Movie = c(\n    \"Fifty Shades of Grey (2015)\",\n    \"The Twilight Saga: New Moon (2009)\",\n    \"Batman & Robin\",\n    \"The Twilight Saga: Breaking Dawn - Part 1\"\n  ),\n  `Worldwide Box-Office` = c(\n    \"$569,651,467\",\n    \"$711,048,123\",\n    \"$238,259,753\",\n    \"$712,205,856\"\n  ),\n  stringsAsFactors = FALSE\n)\n\ndatatable(\n  box_office_data,\n  caption = \"Box Office Data for Selected Movies\",\n  options = list(\n    dom = 't', \n    ordering = FALSE\n  ),\n  class = 'cell-border stripe'\n)\n\n\n\n\n\nThese films, despite their low quality, managed to generate significantly higher revenue than their production budgets.\n\n\n3. Choose a prestige actor or director and confirm that they have many projects with high scores on your success metric.\nLets take Leonardo DiCaprio as our prestige actor:\n\nleo_projects &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Leonardo DiCaprio\") |&gt;\n  select(nconst, primaryName, knownForTitles) |&gt;\n  separate_rows(knownForTitles, sep = \",\") |&gt;\n  rename(tconst = knownForTitles) \n\nleo_ratings &lt;- leo_projects |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\") |&gt;\n  select(tconst, primaryName, averageRating, numVotes) |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\") |&gt;\n  select(primaryName, primaryTitle, startYear, averageRating, numVotes)\n\nleo_ratings\n\n# A tibble: 4 × 5\n  primaryName       primaryTitle            startYear averageRating numVotes\n  &lt;chr&gt;             &lt;chr&gt;                       &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n1 Leonardo DiCaprio Inception                    2010           8.8  2606661\n2 Leonardo DiCaprio Titanic                      1997           7.9  1310033\n3 Leonardo DiCaprio The Departed                 2006           8.5  1449938\n4 Leonardo DiCaprio The Wolf of Wall Street      2013           8.2  1628787\n\n\nBased on my metrics, Leonardo DiCaprio has appeared in at least four highly successful movies.\n\n\nCome up with a numerical threshold for a project to be a ‘success’; that is, determine a value such that movies above are all “solid” or better.\nBased on my analysis, I’ve defined a success threshold:\n\nHigh Success: Average rating ≥ 8.0 and votes ≥ 10,000\nLow Success: Average rating &lt; 5.0\nMedium Success: Everything in between This classification balances both critical quality and audience engagement to identify solid or better films."
  },
  {
    "objectID": "mp02.html#taks-4.-trends-in-success-over-time",
    "href": "mp02.html#taks-4.-trends-in-success-over-time",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "Taks 4. Trends in Success Over Time",
    "text": "Taks 4. Trends in Success Over Time\nWith a defined success metric in place, we can now explore how trends in success have evolved over time, focusing on shifts in genre popularity across decades. ### 1. What was the genre with the most “successes” in each decade?\n\ntop_genres_per_decade &lt;- movie_details_high |&gt;\n  mutate(decade = floor(startYear / 10) * 10) |&gt;\n  separate_rows(genres, sep = \",\") |&gt;\n  group_by(decade, genres) |&gt;\n  summarise(success_count = n(), .groups = \"drop\") |&gt;\n  group_by(decade) |&gt;\n  slice_max(success_count, n = 3)\n\n# Creating a bar graph of the top genres per decade\nggplot(top_genres_per_decade, aes(x = factor(decade), y = success_count, fill = genres)) +\n  geom_col() +\n  labs(\n    title = \"Top Genre per Decade by Success Count\",\n    x = \"Decade\",\n    y = \"Number of Successful Titles\",\n    fill = \"Genre\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability\n  )\n\n\n\n\n\n\n\n\nAs we can observe, the drama genre consistently dominated across all decades.\n\n2. What genre consistently has the most “successes”? What genre used to reliably produced “successes” and has fallen out of favor?\n\n# Extracting top 5 genres per decade with ranking\ntop_genres_positions &lt;- movie_details_high |&gt;\n  mutate(decade = floor(startYear / 10) * 10) |&gt;\n  separate_rows(genres, sep = \",\") |&gt;\n  group_by(decade, genres) |&gt;\n  summarise(success_count = n(), .groups = \"drop\") |&gt;\n  group_by(decade) |&gt;\n  arrange(desc(success_count)) |&gt;\n  mutate(position = row_number()) |&gt;\n  filter(position &lt;= 5)\n\n# Plotting the line graph with reversed success position scale\nggplot(top_genres_positions, aes(x = decade, y = position, color = genres, group = genres)) +\n  geom_line(size = 1) +\n  geom_point(size = 3) +\n  scale_y_reverse() +\n  scale_x_continuous(breaks = seq(1920, 2020, by = 20)) +\n  labs(\n    title = \"Top 5 Genre Success Positions per Decade\",\n    x = \"Decade\",\n    y = \"Success Position (1 = Top)\"\n  ) +\n  theme_light()\n\n\n\n\n\n\n\n\nWe see that drama has the most successes. Comedy used to be the second most popular genre till the 1990s. Crime used to be popular until the 2010s. Now action movies became the second most successful genre.\n\n\n3. What genre has produced the most “successes” since 2010? Does it have the highest success rate or does it only have a large number of successes because there are many productions in that genre?\n\n# Filtering for Drama and Action genres\nfiltered_genres &lt;- movie_details_high |&gt;\n  separate_rows(genres, sep = \",\") |&gt;\n  filter(startYear &gt;= 2010 & genres %in% c(\"Drama\", \"Action\", \"Comedy\", \"Adventure\"))\n\n# Creating smooth area plot\nggplot(filtered_genres, aes(x = averageRating, fill = genres)) +\n  geom_density(alpha = 0.4) +  # Smooth density plot with transparency\n  labs(\n    title = \"Rating Distribution for Drama, Action and Comedy Movies\",\n    x = \"Average Rating\",\n    y = \"Density\"\n  ) +\n  theme_light() + \n  scale_fill_manual(values = c(\"Comedy\" = \"green\",\"Drama\" = \"blue\", \"Action\" = \"red\", \"Adventure\" = \"yellow\"))\n\n\n\n\n\n\n\n\nThis plot suggests that, since 2010, the four genres have shown similar ratings and vote counts. However, comedy appears to be the least successful among them, likely indicating lower audience engagement or critical reception compared to the other genres.\n\n\n4. What genre has become more popular in recent years?\n\n# Filtering for Drama and Action genres\nfiltered_genres &lt;- movie_details_high |&gt;\n  separate_rows(genres, sep = \",\") |&gt;\n  filter(startYear &gt;= 2018 & genres %in% c(\"Drama\", \"Action\", \"Comedy\", \"Adventure\"))\n\n# Creating smooth area plot\nggplot(filtered_genres, aes(x = averageRating, fill = genres)) +\n  geom_density(alpha = 0.4) +  # Smooth density plot with transparency\n  labs(\n    title = \"Rating Distribution for Drama, Action and Comedy Movies\",\n    x = \"Average Rating\",\n    y = \"Density\"\n  ) +\n  theme_light() + \n  scale_fill_manual(values = c(\"Comedy\" = \"green\",\"Drama\" = \"blue\", \"Action\" = \"red\", \"Adventure\" = \"yellow\"))\n\n\n\n\n\n\n\n\n\n# Creating a histogram plot for genre counts\ngenre_counts &lt;- movie_details_high |&gt;\n  separate_rows(genres, sep = \",\") |&gt;\n  filter(startYear &gt;= 2018 & genres %in% c(\"Drama\", \"Action\", \"Comedy\", \"Adventure\")) |&gt;\n  group_by(genres) |&gt;\n  summarise(Count = n(), .groups = \"drop\")\n\n# Ploting the histogram\nggplot(genre_counts, aes(x = genres, y = Count, fill = genres)) +\n  geom_col() +\n  labs(\n    title = \"Number of Successful Movies by Genre (2018 and later)\",\n    x = \"Genre\",\n    y = \"Count\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\"\n  )\n\n\n\n\n\n\n\n\nThe data indicates that the Comedy and Adventure genres have been the least successful and popular in recent years. In contrast, Action and Drama genres have emerged as the most successful, likely driven by strong audience engagement and critical acclaim."
  },
  {
    "objectID": "mp02.html#task-5-key-personnel",
    "href": "mp02.html#task-5-key-personnel",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "Task 5: Key Personnel",
    "text": "Task 5: Key Personnel\nNext, we will focus on identifying key personnel to anchor our project. Specifically, we’ll select two actors and one director who have prior experience in the target genre, with at least moderate success and one major success to their credit.\nWe may explore combinations such as:\n\nAn experienced, established actor paired with a rising star.\nA successful actor-director duo who have worked together before.\nA new collaboration between two high-profile individuals who have never worked together.\n\nFirst, let’s explore the various professions in the movie industry based on the data pulled from the TITLE_PRINCIPALS table.\n\nunique_categories &lt;- unique(TITLE_PRINCIPALS$category)\nprint(unique_categories)\n\n [1] \"self\"                \"director\"            \"producer\"           \n [4] \"cinematographer\"     \"composer\"            \"editor\"             \n [7] \"actor\"               \"actress\"             \"production_designer\"\n[10] \"writer\"              \"casting_director\"    \"archive_footage\"    \n[13] \"archive_sound\"      \n\n\nFor our movie proposal, I will select the drama genre, as it remains the most popular genre to date. For the director, I will focus on someone who has directed a successful drama since the year 2000. Additionally, I will ensure the chosen director is 70 years old or younger to ensure relevance and availability. From this pool, I will identify the top 10 directors with the highest number of successful movies to shortlist the ideal candidate.\n\ncurrent_year &lt;- 2024\n\ntop_10_directors &lt;- movie_details_high |&gt;\n  filter(startYear &gt;= 2000) |&gt;\n  separate_rows(genres, sep = \",\") |&gt;\n  filter(genres == \"Drama\") |&gt;\n  inner_join(TITLE_CREW, by = \"tconst\") |&gt;\n  separate_rows(directors, sep = \",\") |&gt;\n  inner_join(NAME_BASICS, by = c(\"directors\" = \"nconst\")) |&gt;\n  filter(is.na(deathYear), (current_year - birthYear) &lt;= 70) |&gt;\n  group_by(directors, primaryName) |&gt;\n  summarise(num_success_movies = n(), .groups = \"drop\") |&gt;\n  arrange(desc(num_success_movies)) |&gt;\n  slice_head(n = 10) |&gt;\n  select(Movie_Director = primaryName, Number_of_Successful_Movies = num_success_movies)\n\n# Displaying the table using DT\ndatatable(\n  top_10_directors,\n  caption = \"Top 10 Drama Movie Directors by Number of Successful Movies\",\n  options = list(dom = 't', ordering = FALSE),\n  class = 'cell-border stripe'\n)\n\n\n\n\n\nNow, let’s identify five successful actors and five successful actresses to feature in our movie. Lets consider only movies filmed in recent 10 years. This way we make sure the actors and actresses are still active.\n\n# Filtering and identifying top actors and actresses from successful movies (2014-2024)\nresult_table &lt;- movie_details_high |&gt;\n  filter(startYear &gt;= 2014) |&gt;\n  inner_join(TITLE_PRINCIPALS, by = \"tconst\") |&gt;\n  filter(category %in% c(\"actor\", \"actress\")) |&gt;\n  inner_join(NAME_BASICS, by = \"nconst\") |&gt;\n  group_by(primaryName, category) |&gt;\n  summarise(num_success_movies = n(), .groups = \"drop\") |&gt;\n  arrange(desc(num_success_movies)) |&gt;\n  group_by(category) |&gt;\n  slice_head(n = 5) |&gt;\n  ungroup() |&gt;\n  mutate(Role = ifelse(category == \"actor\", \"Actor\", \"Actress\")) |&gt;\n  select(Role, Name = primaryName, `Number of Successful Movies` = num_success_movies)\n\n# Display the result as a simple table\ndatatable(\n  result_table,\n  caption = \"Top Actor and Actress by Number of Successful Movies\",\n  options = list(dom = 't', ordering = FALSE),\n  class = 'cell-border stripe'\n)\n\n\n\n\n\nIn addition to selecting a director and two actors, let’s identify a successful screenwriter to further strengthen our project.\n\n# Filtering drama movies, counting writers, and displaying top 10\ntop_10_writers &lt;- movie_details_high |&gt;\n  filter(startYear &gt;= 2000) |&gt;\n  separate_rows(genres, sep = \",\") |&gt;\n  filter(genres == \"Drama\") |&gt;\n  inner_join(TITLE_CREW, by = \"tconst\") |&gt;\n  separate_rows(writers, sep = \",\") |&gt;\n  inner_join(NAME_BASICS, by = c(\"writers\" = \"nconst\")) |&gt;\n  group_by(writers, primaryName) |&gt;\n  summarise(num_success_movies = n(), .groups = \"drop\") |&gt;\n  arrange(desc(num_success_movies)) |&gt;\n  slice_head(n = 10) |&gt;\n  select(Writer = primaryName, `Number of Successful Movies` = num_success_movies)\n\n# Displaying the table\ndatatable(\n  top_10_writers,\n  caption = \"Top 10 Drama Movie Writers by Number of Successful Movies\",\n  options = list(dom = 't', ordering = FALSE),\n  class = 'cell-border stripe'\n)\n\n\n\n\n\nBased on the data we gathered, an ideal lineup for our proposed drama movie would include Christopher Nolan as both the director and writer, given his history of success in the genre. Additionally, Ryan Reynolds would be a great fit as the lead actor, with Scarlett Johansson as the lead actress, forming a compelling and marketable cast."
  },
  {
    "objectID": "mp02.html#task-6-finding-a-classic-movie-to-remake",
    "href": "mp02.html#task-6-finding-a-classic-movie-to-remake",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "Task 6: Finding a Classic Movie to Remake",
    "text": "Task 6: Finding a Classic Movie to Remake\nNext, lets focus on finding a classic movie in the chosen genre to remake with my selected key talent. The goal is to identify a film with high IMDb ratings and strong audience reception, ensuring it hasn’t been remade in the last 25 years. This remake will leverage nostalgia while aligning with current trends to attract both loyal fans and new audiences.\n\n# Identifying classic drama movies (before 1999) and check for remakes in the last 25 years\nclassics_candidates &lt;- movie_details_high |&gt;\n  filter(startYear &lt; 1999) |&gt;\n  separate_rows(genres, sep = \",\") |&gt;\n  filter(genres == \"Drama\") |&gt;\n  arrange(desc(numVotes)) |&gt;\n  slice_head(n = 50) |&gt;\n  mutate(Remake = primaryTitle %in% movie_details_high$primaryTitle[movie_details_high$startYear &gt;= 1999] | \n                   originalTitle %in% movie_details_high$originalTitle[movie_details_high$startYear &gt;= 1999])\n\n# Displaying the result using DT\ndatatable(\n  classics_candidates |&gt;\n    select(\n      `Title Name` = primaryTitle,\n      Year = startYear,\n      Rating = averageRating,\n      Popularity = numVotes,\n      Remake\n    ),\n  caption = \"Top 50 Classic Drama Movies and Potential Remakes\",\n  options = list(\n    pageLength = 10,\n    lengthMenu = c(5, 10, 15),\n    dom = 'lfrtip'\n  ),\n  class = 'cell-border stripe'\n)\n\n\n\n\n\nA compelling option for our project is to remake “The Game” (ranked 46th in the table). I believe Ryan Reynolds and Scarlett Johansson would be excellent fits for the story. Their versatility and screen presence align perfectly with the film’s psychological and suspenseful tone. Personally, I admire both actors and am confident they can bring the necessary depth and intrigue to this type of movie.\nNext, we will verify whether the key actors, directors, or writers from the original movie are still alive. If they are, we’ll coordinate with the legal department to secure the necessary rights for the remake. Additionally, we’ll explore the possibility of including any original cast members as fan service to enhance audience appeal.\n\n# Pulling and filtering alive cast and crew of 'The Game' (tt0119174)\npersonnel_details &lt;- bind_rows(\n  TITLE_PRINCIPALS |&gt;\n    filter(tconst == \"tt0119174\") |&gt;\n    select(nconst, category),\n  TITLE_CREW |&gt;\n    filter(tconst == \"tt0119174\") |&gt;\n    select(directors, writers) |&gt;\n    pivot_longer(cols = everything(), values_to = \"nconst\", names_to = \"category\")\n) |&gt;\n  filter(!is.na(nconst)) |&gt;\n  inner_join(NAME_BASICS, by = \"nconst\") |&gt;\n  filter(is.na(deathYear)) |&gt;\n  mutate(\n    age = 2024 - birthYear,\n    role = case_when(\n      category == \"actor\" ~ \"Actor\",\n      category == \"actress\" ~ \"Actress\",\n      category == \"director\" ~ \"Director\",\n      category == \"writer\" ~ \"Writer\",\n      TRUE ~ \"Other\"\n    )\n  )\n\n# Displaying the table using DT\ndatatable(\n  personnel_details |&gt;\n    select(Role = role, Name = primaryName, BirthYear = birthYear, Age = age),\n  caption = \"Alive Cast and Crew of The Game\",\n  options = list(\n    pageLength = 5,\n    lengthMenu = c(5, 10, 15),\n    dom = 'lfrtip'\n  ),\n  class = 'cell-border stripe'\n)"
  },
  {
    "objectID": "mp02.html#task-7-write-and-deliver-your-pitch",
    "href": "mp02.html#task-7-write-and-deliver-your-pitch",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "Task 7: Write and Deliver Your Pitch",
    "text": "Task 7: Write and Deliver Your Pitch\nProposal: The Game – A Thrilling Remake\nWe propose an exciting remake of the classic 1997 thriller The Game, featuring modern Hollywood stars Ryan Reynolds and Scarlett Johansson. Their exceptional talent and on-screen chemistry perfectly suit the film’s emotional depth and psychological intrigue. Reynolds’ unique ability to balance charm with intensity, alongside Johansson’s enigmatic presence, promises a gripping cinematic experience.\nThis remake is especially timely, as psychological thrillers are making a strong comeback. The original captivated audiences with its intricate plot and high stakes, making it an ideal choice for a modern reimagining. Johansson and Reynolds—both known for excelling across multiple genres—will attract a broad audience and ensure both critical acclaim and box office success.\nWith its themes of manipulation, reality distortion, and personal redemption, The Game feels even more relevant today in our fast-paced digital world. Featuring such A-list talent not only enhances the film’s commercial potential but also ensures it will resonate deeply with contemporary audiences.\nGet ready for a mind-bending adventure that will keep viewers guessing until the final scene. The Game is back—bigger, bolder, and more thrilling than ever!"
  }
]